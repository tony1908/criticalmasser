var request = require('request');
var parseString = require('xml2js').parseString;
// var cron = require('node-schedule'); in the future, it'd be better to use cron task
// var rule = new cron.RecurrenceRule();
var prueba = null;
var arregloTemp = [];
// rule.second = 5;

module.exports = {
	//a cron task
	// cronScrap: function(ruta, tiempo,callback){ 
	// 	rule.second = tiempo;
	// 	cron.scheduleJob('42 * * * *', function(){
	// 	    console.log('Cada hora');
	// 	    miScrap(ruta,callback)
	// 	});
	// }

	execTime: function(ruta,tiempo, callback) { //function to make the request to the url every n minutes
		var minutes = tiempo, the_interval = minutes * 60 * 1000;
		setInterval(function() {
		miScrap(ruta,callback)//function to scrap the xml
		}, the_interval);
	}

}

var miScrap = function(ruta,callback) { request(ruta, function (error, response, body) {//using request to get the xml
	var nuevos = [];
	var respuesta;
	var sta = false;
  if (!error && response.statusCode == 200) {
    parseString(body, function (err, result) {//parsing the xml
	    var itemsTemp = result.rss.channel[0].item;
	    if (prueba == null) {//we check if we have some equl values
	    	prueba = itemsTemp
	    	respuesta = itemsTemp
	    	sta = true;
	    } else if (itemsTemp == prueba) { //it does nothing if the response hasn't changed
	    	respuesta = [];
	    } else {//if it changes, it goes and get the elements
	    	checarNuevos(itemsTemp,prueba, nuevos)
	    	respuesta = nuevos;
	    	sta = true;
	    }
	});
  } else {
  	callback(err)
  }
  callback(respuesta,prueba, sta)
})
}

var checarNuevos = function(obj1, obj2, nuevos) {//check wich elements are new
	obj1.forEach(function (element, index, array) {
	  	checarIndividual(element, index, array, obj2, nuevos)
	})
}

var checarIndividual = function(elemento, index, array, obj2, nuevos) {
	var estado = true;
	obj2.forEach(function (element, index, array) {
	  	if (JSON.stringify(element) === JSON.stringify(elemento)) {
			estado = false
			return nuevos;
		} else {

		}
	})
	if (estado) {
		nuevos.push(element)
	}
}
